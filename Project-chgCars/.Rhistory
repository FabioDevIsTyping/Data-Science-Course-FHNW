data <- read.csv("cgh_cars.csv", header = TRUE)
head(data)
str(data)
summary(data)
colSums(is.na(data))
boxplot(data$mpg, main="MPG Plot",ylab="Miles per Gallon")
#Checking for outliers in the price column
boxplot((data$price, main="Price Plot"), ylab = "Price")
#Checking for outliers in the price column
boxplot(data$price, main="Price Plot", ylab = "Price")
#Checking for outliers in the price column
boxplot(data$price, main="Price Plot", ylab = "Price")
# Imputing with median because of outliers
data$mpg[is.na(data$mpg)] <- median(data$mpg, na.rm = TRUE)
data$price[is.na(data$price)] <- median(data$price, na.rm = TRUE)
hist(data$mpg, main="MPG Distribution(after Imputation)", xlab="Miles per Gallon", col="lightblue",breaks=10)
hist(data$price, main="Price Distribution",xlab = "Price" , col = "red", breaks=10)
#Histograms after Imputation
hist(data$mpg, main="MPG Distribution", xlab="Miles per Gallon", col="lightblue",breaks=10)
#Double check to see if missing values have been resolved
colSums(is.na(data))
#Checking for duplicated rows
duplicates <- data[duplicated(data), ]
print(duplicates)
# Exploring categorical variables
barplot(table(data$brand), main="Car Brands", col="lightblue", las=2)
# Exploring categorical variables
barplot(table(data$brand), main="Car Brands", col="blue", las=2)
barplot(table(data$type), main="Car Type", col="purple", las=2)
barplot(table(data$type), main="Car Type", col="purple", ylab = "Frequency", las=2)
# Exploring categorical variables
barplot(table(data$brand), main="Car Brands", col="blue", ylab="Frequency", las=2)
barplot(table(data$style) ,  main ="Car Style",  col = "orange" , ylab="Frequency", las=2)
# Scatter plot between MPG and price
plot(data$mpg, data$price, main ="MPG vs Price", xlab = "Miles per Gallon", ylab="Price",pch = 19, col="blue")
plot(data$wt, data$price, main="Weight vs Price", xlab="Weight", ylab="Price", pch=19, col="red")
hist(data$wt)
# Count the number of zero values in the 'wt' column
sum(data$wt == 0)
# View rows where 'wt' is zero
data[data$wt == 0, ]
View(duplicates)
View(data)
# Checking numerical columns
# List of columns to consider
columns_to_check <- c("mpg","cyl","display","wt","gear","carb","price")
# Function to check negative values
check_neg_values <- function(column){
negative_values<- data[[column]]<0
sum(negative_values)
}
# Check for negative values in each column
for(column in columns_to_check){
cat("Number of negative values in", column, ":", check_neg_values(column), "\n")
}
# Additionally, check for zero values where they are inappropriate
check_zero_values <- function(column){
zero_values <- data[[column]]==0
sum(zero_values)
}
# Check for zero values in columns where zero is not allowed (e.g., weight)
for (column in columns_to_check) {
cat("Number of zero values in", column, ":", check_zero_values(column), "\n")
}
hist(cyl, main"Histogram of Car Cylinders", xlab = "Car Cylinders")
hist(cyl, main = "Histogram of Car Cylinders", xlab = "Car Cylinders")
hist(data$cyl, main = "Histogram of Car Cylinders", xlab = "Car Cylinders")
hist(data$cyl, main = "Histogram of Car Cylinders", xlab = "Car Cylinders", breaks = seq(-10,10, by 1))
hist(data$cyl,
main = "Histogram of Car Cylinders",
xlab = "Car Cylinders",
col = "lightgray",
breaks = seq(-10, 10, by = 1),  # Set breaks from -10 to 10 with intervals of 1
xlim = c(-10, 10),  # Set x-axis limits to capture all values
xaxt = "n")  # Suppress automatic x-axis
# Create the histogram with more frequent breaks and a defined x-axis
hist(data$cyl,
main = "Histogram of Car Cylinders",
xlab = "Car Cylinders",
col = "lightgray",
breaks = seq(-10, 10, by = 1),  # Set breaks from -10 to 10 with intervals of 1
xlim = c(-10, 10),  # Set x-axis limits to capture all values
xaxt = "n")  # Suppress automatic x-axis
# Add custom x-axis with more frequent ticks (from -10 to 10)
axis(1, at = seq(-10, 10, by = 1))  # Customize x-axis ticks with labels from -10 to 10
install.packages(VIM)
install.packages("VIM")
library(VIM)
# Converting negatives cyl to NA
data$cyl[data$cyl<0] <- NA
data_imputed <- kNN(data, variable = "cyl", k-=5)
data_imputed <- kNN(data, variable = "cyl", k=5)
hist(data_imputed$cyl)
View(duplicates)
View(data_imputed)
# Doing the same for the zero values of mpg
data$mpg[data$mpg==0] <- NA
data_imputed <- kNN(data, variable = "mpg", k=3)
hist(data_imputed$mpg)
View(data)
View(data_imputed)
data <- read.csv("cgh_cars.csv", header = TRUE)
head(data)
str(data)
summary(data)
colSums(is.na(data))
#Checking for outliers in the mpg column
boxplot(data$mpg, main="MPG Plot",ylab="Miles per Gallon")
#Checking for outliers in the price column
boxplot(data$price, main="Price Plot", ylab = "Price")
# Imputing with median because of outliers
data$mpg[is.na(data$mpg)] <- median(data$mpg, na.rm = TRUE)
data$price[is.na(data$price)] <- median(data$price, na.rm = TRUE)
#Histograms after Imputation
hist(data$mpg, main="MPG Distribution", xlab="Miles per Gallon", col="lightblue",breaks=10)
hist(data$price, main="Price Distribution",xlab = "Price" , col = "red", breaks=10)
#Double check to see if missing values have been resolved
colSums(is.na(data))
#Checking for duplicated rows
duplicates <- data[duplicated(data), ]
print(duplicates)
# Exploring categorical columns
barplot(table(data$brand), main="Car Brands", col="blue", ylab="Frequency", las=2)
barplot(table(data$type), main="Car Type", col="purple", ylab = "Frequency", las=2)
barplot(table(data$style) ,  main ="Car Style",  col = "orange" , ylab="Frequency", las=2)
# Checking numerical columns
# List of columns to consider
columns_to_check <- c("mpg","cyl","display","wt","gear","carb","price")
# Function to check negative values
check_neg_values <- function(column){
negative_values<- data[[column]]<0
sum(negative_values)
}
# Check for negative values in each column
for(column in columns_to_check){
cat("Number of negative values in", column, ":", check_neg_values(column), "\n")
}
# Additionally, check for zero values where they are inappropriate
check_zero_values <- function(column){
zero_values <- data[[column]]==0
sum(zero_values)
}
# Check for zero values in columns where zero is not allowed (e.g., weight)
for (column in columns_to_check) {
cat("Number of zero values in", column, ":", check_zero_values(column), "\n")
}
# Create the histogram with more frequent breaks and a defined x-axis
hist(data$cyl,
main = "Histogram of Car Cylinders",
xlab = "Car Cylinders",
col = "lightgray",
breaks = seq(-10, 10, by = 1),  # Set breaks from -10 to 10 with intervals of 1
xlim = c(-10, 10),  # Set x-axis limits to capture all values
xaxt = "n")  # Suppress automatic x-axis
# Add custom x-axis with more frequent ticks (from -10 to 10)
axis(1, at = seq(-10, 10, by = 1))
# Converting negatives cyl to NA
data$cyl[data$cyl<0] <- NA
data_imputed <- kNN(data, variable = "cyl", k=5)
hist(data_imputed$cyl)
# Doing the same for the zero values of mpg
data$mpg[data$mpg==0] <- NA
data_imputed <- kNN(data, variable = "mpg", k=3)
View(data)
View(data_imputed)
zero_values <- data[[column]]==0
sum(zero_values)
}
zero_values <- data[[column]]==0
sum(zero_values)
}
zero_values <- data[[column]]==0
sum(zero_values)
}
zero_values <- data[[column]]==0
sum(zero_values)
}
# Standardization of numerical columns
num_columns <- c("mpg", "display", "wt", "price")
data_standardized <- data
data_standardized[num_columns] <- scale(data[num_columns])
# Function to normalize
normalize <- function(x) {
return((x - min(x, na.rm=TRUE)) / (max(x, na.rm=TRUE) - min(x, na.rm=TRUE)))
}
# Apply normalization to numerical columns
data_normalized <- data
data_normalized[num_columns] <- lapply(data[num_columns], normalize)
# Check the results
summary(data_normalized)
View(data_standardized)
View(data_normalized)
# Check the actual column names in your dataset
colnames(data)
# Corrected numerical columns
num_columns <- c("mpg", "disp", "wt", "price")
# Function to normalize
normalize <- function(x) {
return((x - min(x, na.rm=TRUE)) / (max(x, na.rm=TRUE) - min(x, na.rm=TRUE)))
}
# Apply normalization to numerical columns
data_normalized <- data
data_normalized[num_columns] <- lapply(data[num_columns], normalize)
# Check the normalized data
summary(data_normalized)
View(data_normalized)
# Load the dataset
data <- read.csv("cgh_cars.csv", header = TRUE)
library(VMI)
# Inspect the data structure
head(data)
str(data)
summary(data)
# Check for missing values in the dataset
colSums(is.na(data))
# Checking for outliers in the 'mpg' column
boxplot(data$mpg, main="MPG Plot", ylab="Miles per Gallon")
# Checking for outliers in the 'price' column
boxplot(data$price, main="Price Plot", ylab="Price")
# Imputing missing values with the median for 'mpg' and 'price'
data$mpg[is.na(data$mpg)] <- median(data$mpg, na.rm = TRUE)
data$price[is.na(data$price)] <- median(data$price, na.rm = TRUE)
# Imputing missing values in 'cyl' using kNN (with the VIM package)
library(VIM)
data$cyl[is.na(data$cyl)] <- NA
data <- kNN(data, variable = "cyl", k = 5)
# Double check for any remaining missing values after imputation
colSums(is.na(data))
# Checking for duplicated rows
duplicates <- data[duplicated(data), ]
View(data)
View(data_imputed)
View(data)
View(data_normalized)
View(data)
View(data_imputed)
View(data)
View(data_imputed)
# Load the dataset
data <- read.csv("cgh_cars.csv", header = TRUE)
# Inspect the data structure
head(data)
str(data)
summary(data)
# Check for missing values in the dataset
colSums(is.na(data))
# Checking for outliers in the 'mpg' column
boxplot(data$mpg, main="MPG Plot", ylab="Miles per Gallon")
# Checking for outliers in the 'price' column
boxplot(data$price, main="Price Plot", ylab="Price")
# Imputing missing values with the median for 'mpg' and 'price'
data$mpg[is.na(data$mpg)] <- median(data$mpg, na.rm = TRUE)
data$price[is.na(data$price)] <- median(data$price, na.rm = TRUE)
# Double-check for any remaining missing values
colSums(is.na(data))
# Checking for duplicated rows
duplicates <- data[duplicated(data), ]
print(duplicates)
# Exploring categorical columns with bar plots
barplot(table(data$brand), main="Car Brands", col="blue", ylab="Frequency", las=2)
barplot(table(data$type), main="Car Type", col="purple", ylab="Frequency", las=2)
barplot(table(data$style), main="Car Style", col="orange", ylab="Frequency", las=2)
# Checking numerical columns for negative or zero values where not allowed
columns_to_check <- c("mpg", "cyl", "disp", "wt", "gear", "carb", "price")
# Function to check for negative values
check_neg_values <- function(column) {
negative_values <- data[[column]] < 0
sum(negative_values)
}
# Function to check for zero values
check_zero_values <- function(column) {
zero_values <- data[[column]] == 0
sum(zero_values)
}
# Check for negative and zero values in each column
for (column in columns_to_check) {
cat("Number of negative values in", column, ":", check_neg_values(column), "\n")
cat("Number of zero values in", column, ":", check_zero_values(column), "\n")
}
# Histogram for 'cyl' (cylinders) column after imputation
hist(data$cyl, main = "Histogram of Car Cylinders", xlab = "Car Cylinders", col = "lightgray", breaks = seq(-10, 10, by = 1), xlim = c(-10, 10), xaxt = "n")
axis(1, at = seq(-10, 10, by = 1))
# Corrected numerical columns
num_columns <- c("mpg", "disp", "wt", "price")
# Standardization of numerical columns
data_standardized <- data
data_standardized[num_columns] <- scale(data[num_columns])
# Check the standardized data
summary(data_standardized)
# Function to normalize
normalize <- function(x) {
return((x - min(x, na.rm=TRUE)) / (max(x, na.rm=TRUE) - min(x, na.rm=TRUE)))
}
# Apply normalization to numerical columns
data_normalized <- data
data_normalized[num_columns] <- lapply(data[num_columns], normalize)
# Check the normalized data
summary(data_normalized)
# Final check for missing values
colSums(is.na(data_normalized))
View(data_normalized)
View(data_standardized)
View(data_standardized)
View(duplicates)
# Load the dataset
data <- read.csv("cgh_cars.csv", header = TRUE)
show(data)
View(data)
# Load necessary libraries
library(VIM)  # For kNN imputation
# Load the dataset
data <- read.csv("cgh_cars.csv", header = TRUE)
show(data)
# Inspect the data structure
head(data)
str(data)
summary(data)
# Check for missing values in the dataset
colSums(is.na(data))
# Checking for outliers in the 'mpg' column
boxplot(data$mpg, main="MPG Plot", ylab="Miles per Gallon")
# Checking for outliers in the 'price' column
boxplot(data$price, main="Price Plot", ylab="Price")
# Impute missing values in 'mpg' and 'price' using the median
data$mpg[is.na(data$mpg)] <- median(data$mpg, na.rm = TRUE)
data$price[is.na(data$price)] <- median(data$price, na.rm = TRUE)
# Convert negative 'cyl' values to NA for imputation
data$cyl[data$cyl < 0] <- NA
# Impute remaining missing values using kNN
data <- kNN(data, variable = c("cyl", "mpg", "price"), k = 5)
# Remove columns automatically added by kNN
data <- subset(data, select = -c(ends_with("_imp")))
# Double-check for any remaining missing values
colSums(is.na(data))
# Checking for duplicated rows
duplicates <- data[duplicated(data), ]
print(duplicates)
# Exploring categorical columns with bar plots
barplot(table(data$brand), main="Car Brands", col="blue", ylab="Frequency", las=2)
barplot(table(data$type), main="Car Type", col="purple", ylab="Frequency", las=2)
barplot(table(data$style), main="Car Style", col="orange", ylab="Frequency", las=2)
# Checking numerical columns for negative or zero values where not allowed
columns_to_check <- c("mpg", "cyl", "disp", "wt", "gear", "carb", "price")
# Function to check for negative values
check_neg_values <- function(column) {
negative_values <- data[[column]] < 0
sum(negative_values)
}
# Function to check for zero values
check_zero_values <- function(column) {
zero_values <- data[[column]] == 0
sum(zero_values)
}
# Check for negative and zero values in each column
for (column in columns_to_check) {
cat("Number of negative values in", column, ":", check_neg_values(column), "\n")
cat("Number of zero values in", column, ":", check_zero_values(column), "\n")
}
# Corrected numerical columns
num_columns <- c("mpg", "disp", "wt", "price")
# Standardization of numerical columns
data_standardized <- data
data_standardized[num_columns] <- scale(data[num_columns])
# Check the standardized data
summary(data_standardized)
# Final check for missing values in the standardized data
colSums(is.na(data_standardized))
# Show the final standardized dataset
head(data_standardized)
View(data_standardized)
show(data)
